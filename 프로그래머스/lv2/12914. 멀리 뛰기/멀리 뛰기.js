function solution(n) {
    /* - 문제를 분할하여 풀자 - (DP)
        n = 1, [1] -> 1가지
        n = 2, [1, 1], [2] -> 2가지
        n = 3, [1, 1, 1], [2, 1], [1, 2] => 3가지

        n이 3일 때 가능한 경우의 수는
        n=2인 경우의 방법들에서 1칸씩 더 뛰는 방법 개수 + n=1인 경우의 방법들에서 2칸씩 더 뛰는 방법 개수이다.
        [1, 1], [2]에 1칸씩 더 뛰는 방법 + [1]에 2칸 더 뛰는 방법 => [1, 1, 1], [2, 1] + [1, 2] => 3가지

        따라서 총 칸이 n개일 경우 가능한 방법을 반환하는 함수 f(n)이 있다면,
        f(n) = f(n-1) + f(n-2)이다. (단, n > 0, f(1) = 1, f(2) = 2)
    */
    
    const cases = Array.from(Array(n + 1).fill(0));
    cases[1] = 1;
    cases[2] = 2;
    
    for (let i = 3; i <= n; i++) {
        cases[i] = (cases[i - 1] + cases[i - 2]) % 1234567;
    }
    
    return cases[n];
}